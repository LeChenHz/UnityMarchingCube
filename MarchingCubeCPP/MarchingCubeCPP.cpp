// MarchingCubeCPP.cpp : 定义 DLL 应用程序的导出函数。
//
#pragma once
#include "stdafx.h"
#include <omp.h>
#include <math.h>

#define DLL_EXPORT extern "C" __declspec(dllexport)

typedef unsigned char uint8;
typedef unsigned short uint16;
typedef unsigned int uint32;
typedef unsigned long long uint64;

struct Vec3
{
	__forceinline Vec3() { x = 0.0f; y = 0.0f; z = 0.0f; }
	__forceinline Vec3(const float& x, const float& y, const float& z) :x(x), y(y), z(z) {}
	__forceinline void Normalize()
	{
		const float m = sqrtf(x * x + y * y + z * z);
		if (m > 0.0f)
		{
			const float d = 1.0f / m;
			x *= d;
			y *= d;
			z *= d;
		}
	}
	__forceinline Vec3 operator*(const float& f) const
	{
		return Vec3(x * f, y * f, z * f);
	}
	__forceinline Vec3 operator+(const Vec3& v) const
	{
		return Vec3(x + v.x, y + v.y, z + v.z);
	}
	float x;
	float y;
	float z;
};
struct CPPMesh
{
	uint32 VerticesCount;
	Vec3* Vertices;
	Vec3* Normals;
};

#pragma region const data
// 顶点位置
const Vec3 cube_vertex_position[8] =
{
	{ 0.0f, 0.0f, 0.0f },
	{ 1.0f, 0.0f, 0.0f },
	{ 1.0f, 1.0f, 0.0f },
	{ 0.0f, 1.0f, 0.0f },
	{ 0.0f, 0.0f, 1.0f },
	{ 1.0f, 0.0f, 1.0f },
	{ 1.0f, 1.0f, 1.0f },
	{ 0.0f, 1.0f, 1.0f }
};
// 组成12条边的顶点， 值代表cube_vertex_position[]的索引
const uint8 cube_edges_indices[12][2] =
{
	{ 0, 1 },{ 1, 2 },{ 2, 3 },{ 3, 0 },
	{ 4, 5 },{ 5, 6 },{ 6, 7 },{ 7, 4 },
	{ 0, 4 },{ 1, 5 },{ 2, 6 },{ 3, 7 }
};
// 12条边的方向
const Vec3 cube_edge_direction[12] =
{
	{ 1.0f,  0.0f,  0.0f },{ 0.0f,  1.0f,  0.0f },{ -1.0f, 0.0f,  0.0f },{ 0.0f,  -1.0f, 0.0f },
	{ 1.0f,  0.0f,  0.0f },{ 0.0f,  1.0f,  0.0f },{ -1.0f, 0.0f,  0.0f },{ 0.0f,  -1.0f, 0.0f },
	{ 0.0f,  0.0f,  1.0f },{ 0.0f,  0.0f,  1.0f },{ 0.0f,  0.0f,  1.0f },{ 0.0f,  0.0f,  1.0f }
};
const uint8 a2fVertexOffset[8][3] =
{
	{ 0, 0, 0 },{ 1, 0, 0 },{ 1, 1, 0 },{ 0, 1, 0 },
	{ 0, 0, 1 },{ 1, 0, 1 },{ 1, 1, 1 },{ 0, 1, 1 }
};
// 3字节int
// 对于任何边，如果一个顶点在表面内，另一个顶点在表面外，则此边与表面相交
// 对于立方体的8个顶点中的每一个可以是两个可能的状态：表面内部或外部
// 对于任何立方体，都是2^8=256个可能的顶点状态集合
// 该表列出了边与表面相交的所有256个可能的顶点状态
// 这有12条边。对于表中的每个条目，如果边#id是相交的，则位#id被设置为1
const uint16 aiCubeEdgeFlags[256] =
{
	0x000, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c, 0x80c, 0x905, 0xa0f, 0xb06, 0xc0a,
	0xd03, 0xe09, 0xf00,
	0x190, 0x099, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c, 0x99c, 0x895, 0xb9f, 0xa96, 0xd9a,
	0xc93, 0xf99, 0xe90,
	0x230, 0x339, 0x033, 0x13a, 0x636, 0x73f, 0x435, 0x53c, 0xa3c, 0xb35, 0x83f, 0x936, 0xe3a,
	0xf33, 0xc39, 0xd30,
	0x3a0, 0x2a9, 0x1a3, 0x0aa, 0x7a6, 0x6af, 0x5a5, 0x4ac, 0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa,
	0xea3, 0xda9, 0xca0,
	0x460, 0x569, 0x663, 0x76a, 0x066, 0x16f, 0x265, 0x36c, 0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a,
	0x963, 0xa69, 0xb60,
	0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0x0ff, 0x3f5, 0x2fc, 0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa,
	0x8f3, 0xbf9, 0xaf0,
	0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x055, 0x15c, 0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a,
	0xb53, 0x859, 0x950,
	0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0x0cc, 0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca,
	0xac3, 0x9c9, 0x8c0,
	0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc, 0x0cc, 0x1c5, 0x2cf, 0x3c6, 0x4ca,
	0x5c3, 0x6c9, 0x7c0,
	0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c, 0x15c, 0x055, 0x35f, 0x256, 0x55a,
	0x453, 0x759, 0x650,
	0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc, 0x2fc, 0x3f5, 0x0ff, 0x1f6, 0x6fa,
	0x7f3, 0x4f9, 0x5f0,
	0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c, 0x36c, 0x265, 0x16f, 0x066, 0x76a,
	0x663, 0x569, 0x460,
	0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac, 0x4ac, 0x5a5, 0x6af, 0x7a6, 0x0aa,
	0x1a3, 0x2a9, 0x3a0,
	0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c, 0x53c, 0x435, 0x73f, 0x636, 0x13a,
	0x033, 0x339, 0x230,
	0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c, 0x69c, 0x795, 0x49f, 0x596, 0x29a,
	0x393, 0x099, 0x190,
	0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c, 0x70c, 0x605, 0x50f, 0x406, 0x30a,
	0x203, 0x109, 0x000
};
// 对于aiCubeEdgeFlags中列出的每个可能的顶点状态，边缘交点都有一个特定的分割三角形。
// a2iTriangleConnectionTable以0-5边缘三元组的形式列出所有形式，列表以无效值0xff终止。
// 例如：a2iTriangleConnectionTable[3]列出corner[0]接corner[1]在表面内部形成的2个三角形，
// 但立方体的其余corner则不是。
const uint8 a2iTriangleConnectionTable[256][16] =
{
	// 要么连续三个都是0xff，要么都不是0xff，有0xff代表不用画生成mesh啦
	{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 8, 3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 1, 9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 8, 3, 9, 8, 1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 2, 10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 8, 3, 1, 2, 10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 2, 10, 0, 2, 9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 2, 8, 3, 2, 10, 8, 10, 9, 8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 3, 11, 2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 11, 2, 8, 11, 0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 9, 0, 2, 3, 11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 11, 2, 1, 9, 11, 9, 8, 11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 3, 10, 1, 11, 10, 3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 10, 1, 0, 8, 10, 8, 11, 10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 3, 9, 0, 3, 11, 9, 11, 10, 9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 8, 10, 10, 8, 11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 4, 7, 8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 4, 3, 0, 7, 3, 4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 1, 9, 8, 4, 7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 4, 1, 9, 4, 7, 1, 7, 3, 1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 2, 10, 8, 4, 7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 3, 4, 7, 3, 0, 4, 1, 2, 10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 2, 10, 9, 0, 2, 8, 4, 7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, 0xff, 0xff, 0xff, 0xff },
	{ 8, 4, 7, 3, 11, 2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 11, 4, 7, 11, 2, 4, 2, 0, 4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 0, 1, 8, 4, 7, 2, 3, 11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, 0xff, 0xff, 0xff, 0xff },
	{ 3, 10, 1, 3, 11, 10, 7, 8, 4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, 0xff, 0xff, 0xff, 0xff },
	{ 4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, 0xff, 0xff, 0xff, 0xff },
	{ 4, 7, 11, 4, 11, 9, 9, 11, 10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 5, 4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 5, 4, 0, 8, 3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 5, 4, 1, 5, 0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 8, 5, 4, 8, 3, 5, 3, 1, 5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 2, 10, 9, 5, 4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 3, 0, 8, 1, 2, 10, 4, 9, 5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 5, 2, 10, 5, 4, 2, 4, 0, 2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, 0xff, 0xff, 0xff, 0xff },
	{ 9, 5, 4, 2, 3, 11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 11, 2, 0, 8, 11, 4, 9, 5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 5, 4, 0, 1, 5, 2, 3, 11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, 0xff, 0xff, 0xff, 0xff },
	{ 10, 3, 11, 10, 1, 3, 9, 5, 4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, 0xff, 0xff, 0xff, 0xff },
	{ 5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, 0xff, 0xff, 0xff, 0xff },
	{ 5, 4, 8, 5, 8, 10, 10, 8, 11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 7, 8, 5, 7, 9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 3, 0, 9, 5, 3, 5, 7, 3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 7, 8, 0, 1, 7, 1, 5, 7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 5, 3, 3, 5, 7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 7, 8, 9, 5, 7, 10, 1, 2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, 0xff, 0xff, 0xff, 0xff },
	{ 8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, 0xff, 0xff, 0xff, 0xff },
	{ 2, 10, 5, 2, 5, 3, 3, 5, 7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 7, 9, 5, 7, 8, 9, 3, 11, 2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, 0xff, 0xff, 0xff, 0xff },
	{ 2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, 0xff, 0xff, 0xff, 0xff },
	{ 11, 2, 1, 11, 1, 7, 7, 1, 5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, 0xff, 0xff, 0xff, 0xff },
	{ 5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, 0xff },
	{ 11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, 0xff },
	{ 11, 10, 5, 7, 11, 5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 10, 6, 5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 8, 3, 5, 10, 6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 0, 1, 5, 10, 6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 8, 3, 1, 9, 8, 5, 10, 6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 6, 5, 2, 6, 1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 6, 5, 1, 2, 6, 3, 0, 8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 6, 5, 9, 0, 6, 0, 2, 6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, 0xff, 0xff, 0xff, 0xff },
	{ 2, 3, 11, 10, 6, 5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 11, 0, 8, 11, 2, 0, 10, 6, 5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 1, 9, 2, 3, 11, 5, 10, 6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, 0xff, 0xff, 0xff, 0xff },
	{ 6, 3, 11, 6, 5, 3, 5, 1, 3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, 0xff, 0xff, 0xff, 0xff },
	{ 3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, 0xff, 0xff, 0xff, 0xff },
	{ 6, 5, 9, 6, 9, 11, 11, 9, 8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 5, 10, 6, 4, 7, 8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 4, 3, 0, 4, 7, 3, 6, 5, 10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 9, 0, 5, 10, 6, 8, 4, 7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, 0xff, 0xff, 0xff, 0xff },
	{ 6, 1, 2, 6, 5, 1, 4, 7, 8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, 0xff, 0xff, 0xff, 0xff },
	{ 8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, 0xff, 0xff, 0xff, 0xff },
	{ 7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, 0xff },
	{ 3, 11, 2, 7, 8, 4, 10, 6, 5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, 0xff, 0xff, 0xff, 0xff },
	{ 0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, 0xff, 0xff, 0xff, 0xff },
	{ 9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, 0xff },
	{ 8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, 0xff, 0xff, 0xff, 0xff },
	{ 5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, 0xff },
	{ 0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, 0xff },
	{ 6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, 0xff, 0xff, 0xff, 0xff },
	{ 10, 4, 9, 6, 4, 10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 4, 10, 6, 4, 9, 10, 0, 8, 3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 10, 0, 1, 10, 6, 0, 6, 4, 0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, 0xff, 0xff, 0xff, 0xff },
	{ 1, 4, 9, 1, 2, 4, 2, 6, 4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, 0xff, 0xff, 0xff, 0xff },
	{ 0, 2, 4, 4, 2, 6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 8, 3, 2, 8, 2, 4, 4, 2, 6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 10, 4, 9, 10, 6, 4, 11, 2, 3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, 0xff, 0xff, 0xff, 0xff },
	{ 3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, 0xff, 0xff, 0xff, 0xff },
	{ 6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, 0xff },
	{ 9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, 0xff, 0xff, 0xff, 0xff },
	{ 8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, 0xff },
	{ 3, 11, 6, 3, 6, 0, 0, 6, 4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 6, 4, 8, 11, 6, 8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 7, 10, 6, 7, 8, 10, 8, 9, 10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, 0xff, 0xff, 0xff, 0xff },
	{ 10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, 0xff, 0xff, 0xff, 0xff },
	{ 10, 6, 7, 10, 7, 1, 1, 7, 3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, 0xff, 0xff, 0xff, 0xff },
	{ 2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, 0xff },
	{ 7, 8, 0, 7, 0, 6, 6, 0, 2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 7, 3, 2, 6, 7, 2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, 0xff, 0xff, 0xff, 0xff },
	{ 2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, 0xff },
	{ 1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, 0xff },
	{ 11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, 0xff, 0xff, 0xff, 0xff },
	{ 8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, 0xff },
	{ 0, 9, 1, 11, 6, 7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, 0xff, 0xff, 0xff, 0xff },
	{ 7, 11, 6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 7, 6, 11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 3, 0, 8, 11, 7, 6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 1, 9, 11, 7, 6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 8, 1, 9, 8, 3, 1, 11, 7, 6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 10, 1, 2, 6, 11, 7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 2, 10, 3, 0, 8, 6, 11, 7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 2, 9, 0, 2, 10, 9, 6, 11, 7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, 0xff, 0xff, 0xff, 0xff },
	{ 7, 2, 3, 6, 2, 7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 7, 0, 8, 7, 6, 0, 6, 2, 0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 2, 7, 6, 2, 3, 7, 0, 1, 9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, 0xff, 0xff, 0xff, 0xff },
	{ 10, 7, 6, 10, 1, 7, 1, 3, 7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, 0xff, 0xff, 0xff, 0xff },
	{ 0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, 0xff, 0xff, 0xff, 0xff },
	{ 7, 6, 10, 7, 10, 8, 8, 10, 9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 6, 8, 4, 11, 8, 6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 3, 6, 11, 3, 0, 6, 0, 4, 6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 8, 6, 11, 8, 4, 6, 9, 0, 1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, 0xff, 0xff, 0xff, 0xff },
	{ 6, 8, 4, 6, 11, 8, 2, 10, 1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, 0xff, 0xff, 0xff, 0xff },
	{ 4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, 0xff, 0xff, 0xff, 0xff },
	{ 10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, 0xff },
	{ 8, 2, 3, 8, 4, 2, 4, 6, 2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 4, 2, 4, 6, 2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, 0xff, 0xff, 0xff, 0xff },
	{ 1, 9, 4, 1, 4, 2, 2, 4, 6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, 0xff, 0xff, 0xff, 0xff },
	{ 10, 1, 0, 10, 0, 6, 6, 0, 4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, 0xff },
	{ 10, 9, 4, 6, 10, 4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 4, 9, 5, 7, 6, 11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 8, 3, 4, 9, 5, 11, 7, 6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 5, 0, 1, 5, 4, 0, 7, 6, 11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, 0xff, 0xff, 0xff, 0xff },
	{ 9, 5, 4, 10, 1, 2, 7, 6, 11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, 0xff, 0xff, 0xff, 0xff },
	{ 7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, 0xff, 0xff, 0xff, 0xff },
	{ 3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, 0xff },
	{ 7, 2, 3, 7, 6, 2, 5, 4, 9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, 0xff, 0xff, 0xff, 0xff },
	{ 3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, 0xff, 0xff, 0xff, 0xff },
	{ 6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, 0xff },
	{ 9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, 0xff, 0xff, 0xff, 0xff },
	{ 1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, 0xff },
	{ 4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, 0xff },
	{ 7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, 0xff, 0xff, 0xff, 0xff },
	{ 6, 9, 5, 6, 11, 9, 11, 8, 9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, 0xff, 0xff, 0xff, 0xff },
	{ 0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, 0xff, 0xff, 0xff, 0xff },
	{ 6, 11, 3, 6, 3, 5, 5, 3, 1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, 0xff, 0xff, 0xff, 0xff },
	{ 0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, 0xff },
	{ 11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, 0xff },
	{ 6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, 0xff, 0xff, 0xff, 0xff },
	{ 5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, 0xff, 0xff, 0xff, 0xff },
	{ 9, 5, 6, 9, 6, 0, 0, 6, 2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, 0xff },
	{ 1, 5, 6, 2, 1, 6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, 0xff },
	{ 10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, 0xff, 0xff, 0xff, 0xff },
	{ 0, 3, 8, 5, 6, 10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 10, 5, 6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 11, 5, 10, 7, 5, 11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 11, 5, 10, 11, 7, 5, 8, 3, 0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 5, 11, 7, 5, 10, 11, 1, 9, 0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, 0xff, 0xff, 0xff, 0xff },
	{ 11, 1, 2, 11, 7, 1, 7, 5, 1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, 0xff, 0xff, 0xff, 0xff },
	{ 9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, 0xff, 0xff, 0xff, 0xff },
	{ 7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, 0xff },
	{ 2, 5, 10, 2, 3, 5, 3, 7, 5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, 0xff, 0xff, 0xff, 0xff },
	{ 9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, 0xff, 0xff, 0xff, 0xff },
	{ 9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, 0xff },
	{ 1, 3, 5, 3, 7, 5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 8, 7, 0, 7, 1, 1, 7, 5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 0, 3, 9, 3, 5, 5, 3, 7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 8, 7, 5, 9, 7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 5, 8, 4, 5, 10, 8, 10, 11, 8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, 0xff, 0xff, 0xff, 0xff },
	{ 0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, 0xff, 0xff, 0xff, 0xff },
	{ 10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, 0xff },
	{ 2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, 0xff, 0xff, 0xff, 0xff },
	{ 0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, 0xff },
	{ 0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, 0xff },
	{ 9, 4, 5, 2, 11, 3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, 0xff, 0xff, 0xff, 0xff },
	{ 5, 10, 2, 5, 2, 4, 4, 2, 0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, 0xff },
	{ 5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, 0xff, 0xff, 0xff, 0xff },
	{ 8, 4, 5, 8, 5, 3, 3, 5, 1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 4, 5, 1, 0, 5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, 0xff, 0xff, 0xff, 0xff },
	{ 9, 4, 5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 4, 11, 7, 4, 9, 11, 9, 10, 11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, 0xff, 0xff, 0xff, 0xff },
	{ 1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, 0xff, 0xff, 0xff, 0xff },
	{ 3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, 0xff },
	{ 4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, 0xff, 0xff, 0xff, 0xff },
	{ 9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, 0xff },
	{ 11, 7, 4, 11, 4, 2, 2, 4, 0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, 0xff, 0xff, 0xff, 0xff },
	{ 2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, 0xff, 0xff, 0xff, 0xff },
	{ 9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, 0xff },
	{ 3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, 0xff },
	{ 1, 10, 2, 8, 7, 4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 4, 9, 1, 4, 1, 7, 7, 1, 3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, 0xff, 0xff, 0xff, 0xff },
	{ 4, 0, 3, 7, 4, 3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 4, 8, 7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 10, 8, 10, 11, 8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 3, 0, 9, 3, 9, 11, 11, 9, 10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 1, 10, 0, 10, 8, 8, 10, 11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 3, 1, 10, 11, 3, 10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 2, 11, 1, 11, 9, 9, 11, 8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, 0xff, 0xff, 0xff, 0xff },
	{ 0, 2, 11, 8, 0, 11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 3, 2, 11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 2, 3, 8, 2, 8, 10, 10, 8, 9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 9, 10, 2, 0, 9, 2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, 0xff, 0xff, 0xff, 0xff },
	{ 1, 10, 2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 1, 3, 8, 9, 1, 8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 9, 1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0, 3, 8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
	{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }
};

#pragma endregion

#pragma region static data

const float *VRdata = nullptr;
uint16 cube_size_x;
uint16 cube_size_y;
uint16 cube_size_z;
uint16 cube_size_yz;
uint8 max_threads;
float step_size;

Vec3** threadVertices;
Vec3** threadNormals;
uint32* threadVerticesCount;
uint16* threadWorkingNum;
#pragma endregion

__forceinline void MarchingCubeCore(const uint8& threadIndex, const float& target_value, const uint16& x_index
	, const uint16& y_index, const uint16& z_index)
{
	const Vec3 subdivie_point = Vec3(x_index, y_index, z_index)* step_size;
	//样本点 交点坐标，对于算法中的e1-e12。如果不插值的直接取中点的话，是可以预先计算好的
	Vec3 isosurface_vertices_pos[12];
	Vec3 isosurface_vertices_normal[12];

	float cube_vertex_value[8]; // cube每个顶点的值
	uint8 cube8_flag_index = 0; // 标记cube的顶点状态的flag

	// 创建样本并查找cube顶点在表面内部或外部
	for (uint8 i = 0; i < 8; ++i)
	{
		const uint8* offset = a2fVertexOffset[i];
		const uint32 index = (x_index + offset[0]) * cube_size_yz + (y_index + offset[1]) * cube_size_z + z_index + offset[2];
		cube_vertex_value[i] = VRdata[index];
		if (cube_vertex_value[i] < target_value)
		{
			cube8_flag_index |= 1 << i; //位运算
		}
	}

	if (cube8_flag_index == 0x00 || cube8_flag_index == 0xff) //如果没有三角形需要画	if (edge_flag == 0)
	{
		return;
	}

	uint16 edge_flag = aiCubeEdgeFlags[cube8_flag_index]; // 获取cube的交点flag

	for (uint8 i = 0; i < 12; ++i)
	{
		if (edge_flag & (1 << i))
		{
			// cube一条边的两个顶点的值之差
			const float delta = cube_vertex_value[cube_edges_indices[i][1]] - cube_vertex_value[cube_edges_indices[i][0]];
			const float a_offset = (target_value - cube_vertex_value[cube_edges_indices[i][0]]) / delta; //交点根据标量值进行插值
			//插值出每条边上的交点
			isosurface_vertices_pos[i] = subdivie_point + (cube_vertex_position[cube_edges_indices[i][0]]
				+ cube_edge_direction[i] * a_offset) * step_size;

			const uint32 x1 = x_index * cube_size_yz + y_index * cube_size_z + z_index - cube_size_yz;
			const uint32 x2 = x_index * cube_size_yz + y_index * cube_size_z + z_index + cube_size_yz;
			const uint32 y1 = x_index * cube_size_yz + y_index * cube_size_z + z_index - cube_size_z;
			const uint32 y2 = x_index * cube_size_yz + y_index * cube_size_z + z_index + cube_size_z;
			const uint32 z1 = x_index * cube_size_yz + y_index * cube_size_z + z_index - 1;
			const uint32 z2 = x_index * cube_size_yz + y_index * cube_size_z + z_index + 1;
			isosurface_vertices_normal[i] = Vec3(VRdata[x1] - VRdata[x2], VRdata[y1] - VRdata[y2], VRdata[z1] - VRdata[z2]);
			isosurface_vertices_normal[i].Normalize();
		}
	}

	const uint32 currentCount = threadVerticesCount[threadIndex];
	uint8 triangles_num;
	for (triangles_num = 0; triangles_num < 15; triangles_num += 3)
	{
		if (a2iTriangleConnectionTable[cube8_flag_index][triangles_num] == 0xff) // 无三角形
		{
			break;
		}
		threadVertices[threadIndex][currentCount + triangles_num] = isosurface_vertices_pos[a2iTriangleConnectionTable[cube8_flag_index][triangles_num]];
		threadVertices[threadIndex][currentCount + triangles_num + 1] = isosurface_vertices_pos[a2iTriangleConnectionTable[cube8_flag_index][triangles_num + 1]];
		threadVertices[threadIndex][currentCount + triangles_num + 2] = isosurface_vertices_pos[a2iTriangleConnectionTable[cube8_flag_index][triangles_num + 2]];
		threadNormals[threadIndex][currentCount + triangles_num] = isosurface_vertices_normal[a2iTriangleConnectionTable[cube8_flag_index][triangles_num]];
		threadNormals[threadIndex][currentCount + triangles_num + 1] = isosurface_vertices_normal[a2iTriangleConnectionTable[cube8_flag_index][triangles_num + 1]];
		threadNormals[threadIndex][currentCount + triangles_num + 2] = isosurface_vertices_normal[a2iTriangleConnectionTable[cube8_flag_index][triangles_num + 2]];
	}
	threadVerticesCount[threadIndex] = currentCount + triangles_num;
}

DLL_EXPORT void MarchingCubeIsosurface(CPPMesh &mesh, float target_value)
{
	for (uint8 i = 0; i < max_threads; i++)
	{
		threadVerticesCount[i] = 0;
		threadWorkingNum[i] = 0;
	}
#pragma omp parallel for schedule(static)
	// 循环遍历每个立方体，立方体数由细分数决定
	for (short i = 1; i < cube_size_x - 1; ++i)
	{
		const uint8 tIndex = omp_get_thread_num();
		//const uint16 i_mapping = max_threads * threadWorkingNum[tIndex] + tIndex + 1;
		for (uint16 j = 1; j < cube_size_y - 1; ++j)
		{
			for (uint16 k = 1; k < cube_size_z - 1; ++k)
			{
				MarchingCubeCore(tIndex, target_value, i, j, k);
			}
		}
		threadWorkingNum[tIndex]++;
	}

	uint32 VerticesCount = 0;
	for (uint8 t = 0; t < max_threads; t++)
	{
		VerticesCount += threadVerticesCount[t];
	}
	mesh.VerticesCount = VerticesCount;
	mesh.Vertices = new Vec3[VerticesCount];
	mesh.Normals = new Vec3[VerticesCount];
	uint32 k = 0;
	for (char t = 0; t < max_threads; t++)
	{
		for (uint32 i = 0; i < threadVerticesCount[t]; i++, k++)
		{
			mesh.Vertices[k] = threadVertices[t][i];
			mesh.Normals[k] = threadNormals[t][i];
		}
	}
}

DLL_EXPORT void InitMarchingCube(const float* inData, const uint16 x, const uint16 y, const uint16 z)
{
	VRdata = inData;
	cube_size_x = x;
	cube_size_y = y;
	cube_size_z = z;
	cube_size_yz = y * z;
	max_threads = (uint8)omp_get_max_threads();

#define max(a,b) (((a) > (b)) ? (a) : (b))
	step_size = 1.0f / max(max(x, y), z);
#undef max

	const uint16 uniform = ((x - 2) - (x - 2) % max_threads) / max_threads + 1;
	const uint32 threadDataLength = uniform * cube_size_yz * 15;	//最多x5个面，每个面x3个点
	threadVertices = new Vec3*[max_threads];
	threadNormals = new Vec3*[max_threads];
	threadVerticesCount = new uint32[max_threads];
	threadWorkingNum = new uint16[max_threads];
	for (char i = 0; i < max_threads; i++)
	{
		threadVertices[i] = new Vec3[threadDataLength];
		threadNormals[i] = new Vec3[threadDataLength];
	}
}